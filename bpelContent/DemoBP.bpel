<!-- DemoBP BPEL Process [Generated by the Eclipse BPEL Designer] -->
<!-- Date: Mon Jan 26 14:23:02 KST 2015 -->
<bpel:process name="DemoBP"
         targetNamespace="kr.co.smartylab"
         suppressJoinFailure="yes"
         xmlns:tns="kr.co.smartylab"
         xmlns:bpel="http://docs.oasis-open.org/wsbpel/2.0/process/executable"
         xmlns:ns="http://smartylab.co.kr/products/op/adapter" xmlns:ns1="http://www.w3.org/2001/XMLSchema">

    <!-- Import the client WSDL -->
    <bpel:import namespace="http://smartylab.co.kr/products/op/adapter" location="concert_adapter_demo.wsdl" importType="http://schemas.xmlsoap.org/wsdl/"></bpel:import>
    <bpel:import location="DemoBPArtifacts.wsdl" namespace="kr.co.smartylab" 
	        importType="http://schemas.xmlsoap.org/wsdl/" />
         
    <!-- ================================================================= -->         
    <!-- PARTNERLINKS                                                      -->
    <!-- List of services participating in this BPEL process               -->
    <!-- ================================================================= -->         
    <bpel:partnerLinks>
        <!-- The 'client' role represents the requester of this service. -->
        <bpel:partnerLink name="client"
                     partnerLinkType="tns:DemoBP"
                     myRole="DemoBPProvider"
                     />
        
        
        
        
        <bpel:partnerLink name="DynamicAdapter" partnerLinkType="tns:DynamicAdapterPLT" partnerRole="DynamicAdapterPLTRole"></bpel:partnerLink>
    </bpel:partnerLinks>
  
    <!-- ================================================================= -->         
    <!-- VARIABLES                                                         -->
    <!-- List of messages and XML documents used within this BPEL process  -->
    <!-- ================================================================= -->         
    <bpel:variables>
        <!-- Reference to the message passed as input during initiation -->
        <bpel:variable name="input"
                  messageType="tns:DemoBPRequestMessage"/>
                  
        <!-- 
          Reference to the message that will be returned to the requester
          -->
        <bpel:variable name="output"
                  messageType="tns:DemoBPResponseMessage"/>
        
        
        
        
        <bpel:variable name="invokeFirstAppRequest" messageType="tns:invoke_first_serviceRequest"></bpel:variable>
        
        
        <bpel:variable name="AllocationResult" type="ns1:string"></bpel:variable>
        
        <bpel:variable name="invokeFirstAppResponse" messageType="tns:invoke_first_serviceResponse"></bpel:variable>
        <bpel:variable name="invokeSecondAppRequest" messageType="tns:invoke_second_serviceRequest"></bpel:variable>
        <bpel:variable name="invokeSecondAppResponse" messageType="tns:invoke_second_serviceResponse"></bpel:variable>
        <bpel:variable name="ResourceAllocationResponse" messageType="ns:invoke_adapterOutput"></bpel:variable>
        <bpel:variable name="ResourceAllocationRequest" messageType="ns:invoke_adapterInput"></bpel:variable>
        <bpel:variable name="SecondAppResponse" messageType="ns:invoke_rappOutput"></bpel:variable>
        <bpel:variable name="SecondAppRequest" messageType="ns:invoke_rappInput"></bpel:variable>
        <bpel:variable name="FirstAppResponse" messageType="ns:call_resourceOutput"></bpel:variable>
        <bpel:variable name="FirstAppRequest" messageType="ns:call_resourceInput"></bpel:variable>
    </bpel:variables>

    <!-- ================================================================= -->         
    <!-- ORCHESTRATION LOGIC                                               -->
    <!-- Set of activities coordinating the flow of messages across the    -->
    <!-- services integrated within this business process                  -->
    <!-- ================================================================= -->         
    <bpel:sequence name="DemoBusinessProcess">
        
        <!-- Receive input from requester. 
             Note: This maps to operation defined in DemoBP.wsdl 
             -->
        
        
        <!-- Generate reply to synchronous request -->
        
        
        
        
        
        
        <bpel:pick name="CallTurtlebotService" createInstance="yes">
            <bpel:onMessage partnerLink="client" operation="process" portType="tns:DemoBP" variable="input"><bpel:sequence name="Sequence">
                    <bpel:assign validate="no" name="AssignLinkGraph">
            <bpel:copy>
                <bpel:from><bpel:literal xml:space="preserve"><tns:invoke_adapter xmlns:tns="http://smartylab.co.kr/products/op/adapter" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <tns:LinkGraph>
    <tns:name>tns:name</tns:name>
    <tns:nodes>
      <tns:Node>
        <tns:id>tns:id</tns:id>
        <tns:uri>tns:uri</tns:uri>
        <tns:max>0</tns:max>
        <tns:min>0</tns:min>
        <tns:parameters>
          <tns:parameter>
            <tns:message>tns:message</tns:message>
            <tns:frequency>0</tns:frequency>
          </tns:parameter>
        </tns:parameters>
      </tns:Node>
    </tns:nodes>
    <tns:topics>
      <tns:Topic>
        <tns:id>tns:id</tns:id>
        <tns:type>tns:type</tns:type>
      </tns:Topic>
    </tns:topics>
    <tns:edges>
      <tns:Edge>
        <tns:start>tns:start</tns:start>
        <tns:finish>tns:finish</tns:finish>
        <tns:remap_from>tns:remap_from</tns:remap_from>
        <tns:remap_to>tns:remap_to</tns:remap_to>
      </tns:Edge>
    </tns:edges>
    <tns:methods>
      <tns:Method>
        <tns:name>invoke_first_service</tns:name>
        <tns:address>http://127.0.0.1:8080/ode/processes/DemoBP</tns:address>
        <tns:namespace>kr.co.smartylab</tns:namespace>
        <tns:return_name>invoke_first_serviceResponse/out</tns:return_name>
        <tns:param>in</tns:param>
        <tns:name>invoke_second_service</tns:name>
        <tns:address>http://127.0.0.1:8080/ode/processes/DemoBP</tns:address>
        <tns:namespace>kr.co.smartylab</tns:namespace>
        <tns:return_name>invoke_second_serviceResponse/out</tns:return_name>
        <tns:param>in</tns:param>
      </tns:Method>
    </tns:methods>
  </tns:LinkGraph>
</tns:invoke_adapter></bpel:literal></bpel:from>
                <bpel:to variable="ResourceAllocationRequest" part="parameters"></bpel:to>
            </bpel:copy>
            
        </bpel:assign>
                    <bpel:invoke name="RequestToAllocateResources" partnerLink="DynamicAdapter" operation="invoke_adapter" portType="ns:concert_adapter_soap_serverPortType" inputVariable="ResourceAllocationRequest" outputVariable="ResourceAllocationResponse"></bpel:invoke>
                    <bpel:assign validate="no" name="AssignAllocationResult"><bpel:copy>
                <bpel:from><bpel:literal><tns:DemoBPResponse xmlns:tns="kr.co.smartylab" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <tns:result>tns:result</tns:result>
</tns:DemoBPResponse>
</bpel:literal></bpel:from>
                <bpel:to variable="output" part="payload"></bpel:to>
            </bpel:copy>
            
        
                    </bpel:assign>
                    <bpel:reply name="replyAllocationResult" partnerLink="client" portType="tns:DemoBP" operation="process" variable="output" />
                </bpel:sequence>
            
            </bpel:onMessage>
            <bpel:onMessage partnerLink="client" operation="invoke_first_service" portType="tns:DemoBP" variable="invokeFirstAppRequest">
                <bpel:sequence>
                    <bpel:assign validate="no" name="AssignTurtlebotServiceInput">
                        
                        
                        
                        
                        <bpel:copy>
                            <bpel:from><bpel:literal xml:space="preserve"><tns:invoke_rapp xmlns:tns="http://smartylab.co.kr/products/op/adapter" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <tns:svc_name>wandering</tns:svc_name>
</tns:invoke_rapp></bpel:literal></bpel:from>
                            <bpel:to variable="SecondAppRequest" part="parameters"></bpel:to>
                        </bpel:copy>
                        
                    </bpel:assign>
                    
                    
                    <bpel:invoke name="Invoke" partnerLink="DynamicAdapter" operation="invoke_rapp" portType="ns:concert_adapter_soap_serverPortType" inputVariable="SecondAppRequest" outputVariable="SecondAppResponse"></bpel:invoke>
                    <bpel:assign validate="no" name="AssignTurtlebotMoveResult">
                        
                        
                        
                        
                        
                        <bpel:copy>
                            <bpel:from><bpel:literal><tns:invoke_first_serviceResponse xmlns:tns="kr.co.smartylab" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <tns:out>tns:out</tns:out>
</tns:invoke_first_serviceResponse>
</bpel:literal></bpel:from>
                            <bpel:to variable="invokeFirstAppResponse" part="parameters"></bpel:to>
                        </bpel:copy>
                        <bpel:copy>
                            <bpel:from part="parameters" variable="SecondAppResponse">
                                <bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[ns:out]]></bpel:query>
                            </bpel:from>
                            <bpel:to part="parameters" variable="invokeFirstAppResponse">
                                <bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[tns:out]]></bpel:query>
                            </bpel:to>
                        </bpel:copy>
                    </bpel:assign>
                    
                    
                    <bpel:reply name="ReplyFirstServiceExecutionResult" partnerLink="client" operation="invoke_first_service" portType="tns:DemoBP" variable="invokeFirstAppResponse"></bpel:reply>
                </bpel:sequence>
            </bpel:onMessage>
            
            
            <bpel:onMessage partnerLink="client" operation="invoke_second_service" portType="tns:DemoBP" variable="invokeSecondAppRequest"><bpel:sequence>
                    <bpel:assign validate="no" name="AssignStopSign">
                        <bpel:copy>
                            <bpel:from><bpel:literal xml:space="preserve"><tns:invoke_rapp xmlns:tns="http://smartylab.co.kr/products/op/adapter" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <tns:svc_name>stop</tns:svc_name>
</tns:invoke_rapp>
</bpel:literal></bpel:from>
                            <bpel:to variable="SecondAppRequest" part="parameters"></bpel:to>
                        </bpel:copy>
                        
                    </bpel:assign>
                    <bpel:invoke name="stopFirstService" partnerLink="DynamicAdapter" operation="invoke_rapp" portType="ns:concert_adapter_soap_serverPortType" inputVariable="SecondAppRequest" outputVariable="SecondAppResponse"></bpel:invoke>
                    <bpel:assign validate="no" name="AssignServiceInput">
                        
                        
                        <bpel:copy>
                            <bpel:from><bpel:literal xml:space="preserve"><tns:invoke_rapp xmlns:tns="http://smartylab.co.kr/products/op/adapter" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <tns:svc_name>turtlebot</tns:svc_name>
</tns:invoke_rapp></bpel:literal></bpel:from>
                            <bpel:to variable="SecondAppRequest" part="parameters"></bpel:to>
                        </bpel:copy>
                        
                        
                    </bpel:assign>
                    <bpel:invoke name="InvokeChangableService" partnerLink="DynamicAdapter" operation="invoke_rapp" portType="ns:concert_adapter_soap_serverPortType" inputVariable="SecondAppRequest" outputVariable="SecondAppResponse"></bpel:invoke>
                    <bpel:assign validate="no" name="AssignServiceExecutionResult">
                        
                        
                        <bpel:copy>
                            <bpel:from><bpel:literal><tns:invoke_second_serviceResponse xmlns:tns="kr.co.smartylab" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <tns:out>tns:out</tns:out>
</tns:invoke_second_serviceResponse>
</bpel:literal></bpel:from>
                            <bpel:to variable="invokeSecondAppResponse" part="parameters"></bpel:to>
                        </bpel:copy>
                        
                        <bpel:copy>
                            <bpel:from part="parameters" variable="SecondAppResponse">
                                <bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[ns:out]]></bpel:query>
                            </bpel:from>
                            <bpel:to part="parameters" variable="invokeSecondAppResponse">
                                <bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[tns:out]]></bpel:query>
                            </bpel:to>
                        </bpel:copy>
                    </bpel:assign>
                    <bpel:reply name="ReplyServiceExecutionResult" partnerLink="client" operation="invoke_second_service" portType="tns:DemoBP" variable="invokeSecondAppResponse"></bpel:reply>
                </bpel:sequence>
            
            </bpel:onMessage>
        </bpel:pick>
        
        
        
        
        
        
        
        
    </bpel:sequence>
</bpel:process>

